/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.root.func;


/**
 *
 * @author gavalian
 */
public class FunctionFactory {
    
    private static double ONE_OVER_SQRT_2PI = 1.0/Math.sqrt(2.0*Math.PI);
    
    public static double[] getUniformAxis(int bins, double min, double max){
        double[] axis = new double[bins];
        double width = (max-min)/bins;
        for(int loop = 0; loop < bins; loop++){
            axis[loop] = min + 0.5*width + loop * width;
        }
        return axis;
    }
    
    public static double[] getGaussianValues(double[] axis, double amp,double mean, double sigma){
        double[] values = new double[axis.length];
        for(int loop = 0; loop < values.length; loop++){
            double diff = mean - axis[loop];
            values[loop] = 2.0 + amp*Math.exp(-diff*diff/(2.0*sigma*sigma));
        }
        return values;
    }
    
    public static double[] getGaussianValues(double[] axis, double mean, double sigma){
        return FunctionFactory.getGaussianValues(axis, 1.0, mean, sigma);
    }
    
    
    public static double  gauss(double x, double mean, double sigma){
        return Math.exp(-(x-mean)*(x-mean)/(2.0*sigma*sigma));
    }
    
    public static double landau(double x, double mean, double sigma){
        double lambda = (x-mean)/sigma;
        return Math.exp(-0.5*(lambda+Math.exp(-lambda)));
    }
    
    
    
    public static double getRandMinMax(double min, double max){
        return min + (max-min)*Math.random();
    }
    
    /**
     * Returns a random number for given data set. The data set has to be a normalized Riemann Sum
     * for this to work. Use at your own risk. But internal usage is always checks for the validity
     * of distribution.
     * @param data data set in Riemann Sum form
     * @return a random number generated by distribution.
     */
   
}
